import numpy as np
from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV, train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline
from sklearn.metrics import mean_squared_error

# Assuming challenge_utils.py contains these functions
from challenge_utils import build_training_data, relative_squared_error, save_onnx, load_onnx

# Load data
student_data_path = 'students_drahi_production_consumption_hourly.csv'
target_time, targets, predictors = build_training_data(student_data_path)

# Prepare data
ntot = len(targets)
X = predictors.reshape(ntot, -1)
y = targets

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Optimize Ridge regression model
param_grid = {'alpha': np.logspace(-2, 10, 21)}
grid_search = GridSearchCV(Ridge(), param_grid, cv=5, scoring='neg_mean_squared_error')
grid_search.fit(X_train, y_train)

best_alpha = grid_search.best_params_['alpha']
print('Best alpha:', best_alpha)

# Fit Ridge regression with best alpha
ridge_reg = Ridge(alpha=best_alpha)
ridge_reg.fit(X_train, y_train)
y_pred_ridge = ridge_reg.predict(X_test)
rse_ridge = relative_squared_error(y_pred_ridge, y_test)
print('Ridge regression RSE:', rse_ridge)

# Polynomial model
degree = 2  # Degree of polynomial features
poly_pipeline = make_pipeline(PolynomialFeatures(degree), Ridge(alpha=best_alpha))
poly_pipeline.fit(X_train, y_train)
y_pred_poly = poly_pipeline.predict(X_test)
rse_poly = relative_squared_error(y_pred_poly, y_test)
print('Polynomial model RSE:', rse_poly)
